/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrameUtama.java
 *
 * Created on Apr 29, 2009, 10:16:09 AM
 */
package com.artivisi.pos.ui.frame;

import com.artivisi.pos.model.master.Kassa;
import com.artivisi.pos.model.sekuriti.Menu;
import com.artivisi.pos.model.sekuriti.Pengguna;
import com.artivisi.pos.model.sekuriti.Peran;
import com.artivisi.pos.model.transaksi.SesiKassa;
import com.artivisi.pos.service.MasterService;
import com.artivisi.pos.service.ReportService;
import com.artivisi.pos.service.SekuritiService;
import com.artivisi.pos.service.TransaksiService;
import com.artivisi.pos.ui.dialog.master.KassaDialog;
import com.artivisi.pos.ui.dialog.sekuriti.LoginDialog;
import com.artivisi.pos.ui.dialog.sekuriti.UbahKataSandiDialog;
import com.artivisi.pos.ui.dialog.transaksi.SesiKassaDialog;
import com.artivisi.pos.ui.transaksi.PenjualanPanelNew;
import com.artivisi.pos.util.ApplicationUtils;
import com.artivisi.pos.util.UrutanComparator;
import com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.UIManager;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import org.openide.util.Exceptions;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author kurusgw
 */
public class FrameUtama extends javax.swing.JFrame {

    private static FrameUtama instance;

    public static FrameUtama getInstance() {
        return instance;
    }

    /** Creates new form FrameUtama */
    public FrameUtama() {
        initComponents();
        instance = this;
        menuBar.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        destktopPane = new javax.swing.JDesktopPane();
        lblKassa = new javax.swing.JLabel();
        lblPengguna = new javax.swing.JLabel();
        lblShift = new javax.swing.JLabel();
        lblJam = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuLogin = new javax.swing.JMenuItem();
        mnuUbahPassword = new javax.swing.JMenuItem();
        mnuKassa = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblKassa.setText("Kassa :");

        lblPengguna.setText("Pengguna :");

        lblShift.setText("Shift :");

        mnuFile.setText("File");

        mnuLogin.setText("Login");
        mnuLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoginActionPerformed(evt);
            }
        });
        mnuFile.add(mnuLogin);

        mnuUbahPassword.setText("Ubah Password");
        mnuUbahPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUbahPasswordActionPerformed(evt);
            }
        });
        mnuFile.add(mnuUbahPassword);

        mnuKassa.setText("Setting Kassa");
        mnuKassa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKassaActionPerformed(evt);
            }
        });
        mnuFile.add(mnuKassa);

        menuBar.add(mnuFile);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(destktopPane)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblKassa, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPengguna, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblShift, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addComponent(lblJam, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(destktopPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKassa)
                    .addComponent(lblPengguna)
                    .addComponent(lblShift)
                    .addComponent(lblJam, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoginActionPerformed
        //set pengguna ke null
        pengguna = null;
        //sesi kassa dan shift
        sesiKassa = null;
        //tutup semua internal frame
        for(JInternalFrame frame : internalFrameMap.values()){
            frame.dispose();
        }
        internalFrameMap.clear();
        //bersihkan menu kecuali menu file
        for(Component component : menuBar.getComponents()){
            if(!component.equals(mnuFile)
                    && !component.equals(mnuLogin)
                    && !component.equals(mnuUbahPassword)){
                    menuBar.remove(component);
            }
        }
        menuBar.setVisible(false);
        loginProcess();
    }//GEN-LAST:event_mnuLoginActionPerformed

    private void mnuUbahPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUbahPasswordActionPerformed
        new UbahKataSandiDialog().showDialog();
    }//GEN-LAST:event_mnuUbahPasswordActionPerformed

    private void mnuKassaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKassaActionPerformed
        kassa = new KassaDialog().showDialog();
    }//GEN-LAST:event_mnuKassaActionPerformed
//    private MasterProdukPanel masterProduk;

    //menginstantkan ke Toko Service
    private static TransaksiService transaksiService;
    private static MasterService masterService;
    private static ReportService reportService;
    private static SekuritiService sekuritiService;

    //Pengguna yang berhasil login
    private static Pengguna pengguna;
    private static Kassa kassa;
    private static SesiKassa sesiKassa;

    public static TransaksiService getTransaksiService(){
        return transaksiService;
    }

    public static MasterService getMasterService() {
        return masterService;
    }

    public static ReportService getReportService() {
        return reportService;
    }

    public static SekuritiService getSekuritiService() {
        return sekuritiService;
    }

    public static Pengguna getPengguna() {
        return pengguna;
    }

    public static Kassa getKassa() {
        return kassa;
    }

    public static SesiKassa getSesiKassa() {
        return sesiKassa;
    }

    private void loginProcess(){
        Pengguna p = new LoginDialog().showDialog();
        if(p!=null){
            pengguna = p;
            lblPengguna.setText("Pengguna : " + pengguna.getNamaLengkap());
            //cek apakah usernya kasir atau tidak
            //dihardcode perannya KASIR
            for(Peran peran : pengguna.getPerans()){
                if(peran.getId().equalsIgnoreCase("KASIR")){
                    //cek kassa
                    boolean ret = ApplicationUtils.cekKassaSetting();
                    if(!ret){
                        kassa = new KassaDialog().showDialog();
                    } else {
                        kassa = ApplicationUtils.kassaSetting();
                    }
                    lblKassa.setText("Kassa : " + kassa.getId());
                    //Minta input modal
                    sesiKassa = new SesiKassaDialog().showDialog();
                    lblShift.setText("Shift : " + sesiKassa.getShift().getId());

                    //tampilkan penjualan
                    final JInternalFrame frame = new PenjualanPanelNew();
                    frame.addInternalFrameListener(new InternalFrameAdapter() {

                        @Override
                        public void internalFrameClosing(InternalFrameEvent e) {
                            internalFrameMap.remove(frame.getClass().getName());
                            destktopPane.remove(frame);
                        }
                    });
                    destktopPane.add(frame);
                    internalFrameMap.put(frame.getClass().getName(), frame);
                    frame.setVisible(true);
                    try {
                        frame.setSelected(true);
                    } catch (PropertyVetoException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    frame.setSize(destktopPane.getSize());
                    break;
                }
            }
            //construct menu
            mnuLogin.setText("Logout");
            constructMenu();


   
        }
    }

    private void constructMenu(){
        Set<Menu> menus = new HashSet<Menu>();
        for(Peran p : pengguna.getPerans()){
            menus.addAll(p.getMenus());
        }
        //Map level dan menunya
        Map<Integer,List<Menu>> menuMap = new HashMap<Integer, List<Menu>>();
        for(Menu m:menus){
            List<Menu> menuList = null;
            if(menuMap.get(m.getMenuLevel()) == null){
                menuList = new ArrayList<Menu>();
                menuMap.put(m.getMenuLevel(),menuList);
            } else {
                menuList = menuMap.get(m.getMenuLevel());
            }
            menuList.add(m);
        }
        //Ambil menu level 0 dan tambahkan dalam menubar
        Set<Menu> menuLevel0 = new TreeSet<Menu>(new UrutanComparator());//mendapatkan menu level 0 yang diurutkan berdasarkan urutan
        if(menuMap.get(0) == null){
            throw new IllegalStateException("Menu level 0 tidak ada !!!");
        } else {
            menuLevel0.addAll(menuMap.get(0));
        }
        //pasang menu level 0 di dalam menu bar
        Map<Menu,JMenuItem> menuItemMap = new HashMap<Menu, JMenuItem>();
        for(Menu m : menuLevel0){
            JMenu jMenu = new JMenu();
            jMenu.setText(m.getId());
            menuBar.add(jMenu);
            menuItemMap.put(m, jMenu);
        }
        //level berikutnya dipasang
        //construct parent child tree
        List<Menu> parents = menuMap.get(0);
        if(parents==null){
            throw new IllegalStateException("Menu level 0 tidak ada!");
        }
        Set<Menu> childs = null;
        Integer maximumLevel = FrameUtama.getSekuritiService().maximumMenuLevel();
        for(int i=1;i<=maximumLevel;i++){
            childs = new TreeSet<Menu>(new UrutanComparator());
            childs.addAll(menuMap.get(i));
            if(childs!=null){
                for(Menu m : childs){
                    if(parents.indexOf(m.getParent())>=0){
                        Menu parent = parents.get(parents.indexOf(m.getParent()));
                        parent.addChild(m);
                    }
                    //bikin menu berdasarkan panelClass, kalau nilainya null dibikin JMenu, kalau ada berarti JMenuItem
                    if(m.getPanelClass() == null){
                        JMenu jMenu = new JMenu();
                        jMenu.setText(m.getId());
                        menuItemMap.put(m, jMenu);
                        JMenuItem parent = menuItemMap.get(m.getParent());
                        if(parent!=null && parent instanceof JMenu){
                            JMenu parentMenu = (JMenu) parent;
                            parentMenu.add(jMenu);
                        } 
                    } else {
                        JMenuItem jMenuItem = new JMenuItem();
                        jMenuItem.setText(m.getId());
                        jMenuItem.addActionListener(createActionListener(m));
                        menuItemMap.put(m, jMenuItem);
                        JMenuItem parent = menuItemMap.get(m.getParent());
                        if(parent!=null && parent instanceof JMenu){
                            JMenu parentMenu = (JMenu) parent;
                            parentMenu.add(jMenuItem);
                        }
                    }
                }
            }
            parents = new ArrayList<Menu>(childs);
        }
        menuBar.setVisible(true);
        menuBar.updateUI();
    }

    private Map<String,JInternalFrame> internalFrameMap = new HashMap<String, JInternalFrame>();

    public void removeInternalFrame(JInternalFrame c){
        c.dispose();
        internalFrameMap.remove(c.getClass().getName());
        destktopPane.remove(c);
    }

    private ActionListener createActionListener(final Menu menu){
        return new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    //cek apakah sudah ada
                    JInternalFrame internalFrame = internalFrameMap.get(menu.getPanelClass());
                    if (internalFrame == null) {
                        final Object o = Class.forName(menu.getPanelClass()).newInstance();
                        if (o instanceof JInternalFrame) {
                            final JInternalFrame frame = (JInternalFrame) o;
                            frame.addInternalFrameListener(new InternalFrameAdapter() {

                                @Override
                                public void internalFrameClosing(InternalFrameEvent e) {
                                    internalFrameMap.remove(frame.getClass().getName());
                                    destktopPane.remove(frame);
                                }
                            });
                            destktopPane.add(frame);
                            internalFrameMap.put(frame.getClass().getName(), frame);
                            internalFrame = frame;
                        }
                    } else {
                        internalFrame.toFront();
                    }
                    internalFrame.setVisible(true);
                    internalFrame.setSelected(true);
                    internalFrame.setSize(destktopPane.getSize());
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(FrameUtama.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrameUtama.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(FrameUtama.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(FrameUtama.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {

        AbstractApplicationContext ctx =
            new ClassPathXmlApplicationContext
            ("classpath:clientContext.xml");
          ctx.registerShutdownHook();

        transaksiService = (TransaksiService) ctx.getBean("transaksiService");
        masterService = (MasterService) ctx.getBean("masterService");
        sekuritiService = (SekuritiService) ctx.getBean("sekuritiService");
        reportService = (ReportService) ctx.getBean("reportService");

        //nimbus
        UIManager.setLookAndFeel(NimbusLookAndFeel.class.getName());

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrameUtama fu = new FrameUtama();
                fu.setExtendedState(JFrame.MAXIMIZED_BOTH);
                fu.setVisible(true);
                fu.jam();
                fu.loginProcess();
                //jam di status
            }
        });
    }

    private void jam(){
        Thread t = new Thread(new Runnable() {

            public void run() {
                while(true){
                    lblJam.setText(new SimpleDateFormat("EEE, MMM dd yyyy HH:mm:ss").format(FrameUtama.getMasterService().tanggalServer()));
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        });
        t.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane destktopPane;
    private javax.swing.JLabel lblJam;
    private javax.swing.JLabel lblKassa;
    private javax.swing.JLabel lblPengguna;
    private javax.swing.JLabel lblShift;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuKassa;
    private javax.swing.JMenuItem mnuLogin;
    private javax.swing.JMenuItem mnuUbahPassword;
    // End of variables declaration//GEN-END:variables
}
